# app/emailers/templates.py
"""
Email rendering templates for igwatch.
Converts the parsed payload dict into subject/body text.
"""

from __future__ import annotations
from typing import Dict, Any


def render_subject(payload: Dict[str, Any]) -> str:
    """Return an email subject line for a parsed report payload."""
    base = payload.get("headline") or payload.get("title") or "Update"
    return f"[Earnings Watch] {base}"


def render_body(payload: Dict[str, Any]) -> str:
    """Return the plaintext email body with summary + highlights."""
    lines: list[str] = []

    lines.append(f"Headline: {payload.get('headline','')}")
    lines.append(f"URL: {payload.get('final_url','')}")
    lines.append("")
    if payload.get("short_summary"):
        lines.append("Summary:")
        lines.append(payload["short_summary"])
        lines.append("")

    if payload.get("key_highlights"):
        lines.append("Key Highlights:")
        for h in payload["key_highlights"]:
            lines.append(f" - {h}")
        lines.append("")

    # Common metrics (if parser extracted them)
    metrics = []
    for k in ["revenue", "ebitda", "net_income", "eps"]:
        v = payload.get(k, {})
        if isinstance(v, dict):
            metrics.append(f"{k.upper()}: {v.get('current','')} (YoY: {v.get('yoy','')})")
    if metrics:
        lines.append("Metrics:")
        for m in metrics:
            lines.append(f" - {m}")
        lines.append("")

    if payload.get("final_thoughts"):
        lines.append("Notes:")
        lines.append(payload["final_thoughts"])

    return "\n".join(lines)
