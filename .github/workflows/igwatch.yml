name: igwatch

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Log instead of sending emails"
        type: choice
        options: ["true", "false"]
        default: "true"
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Persist dedupe DB at data/seen.db
      - name: Restore state DB
        uses: actions/cache/restore@v4
        with:
          path: data/seen.db
          key: igwatch-seen-db-${{ runner.os }}-v2-${{ github.run_id }}
          restore-keys: |
            igwatch-seen-db-${{ runner.os }}-v2-

      - name: Choose runtime params
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "RUN_TIMEOUT=180" >> $GITHUB_ENV
            echo "POLL_SECONDS=20" >> $GITHUB_ENV
            echo "DRY_RUN=${{ inputs.dry_run }}" >> $GITHUB_ENV
          else
            echo "RUN_TIMEOUT=75" >> $GITHUB_ENV
            echo "POLL_SECONDS=60" >> $GITHUB_ENV
            echo "DRY_RUN=false" >> $GITHUB_ENV
          fi

- name: Create .env for this run (Gmail)
  run: |
    {
      echo "POLL_SECONDS=${POLL_SECONDS}"
      echo "DRY_RUN=${DRY_RUN}"
      echo "START_FROM_DAYS=45"
      echo "STRICT_EARNINGS_KEYWORDS=true"
      echo "SMTP_HOST=smtp.gmail.com"
      echo "SMTP_PORT=587"
      echo "SMTP_USER=${{ secrets.SMTP_USER }}"
      echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}"
      echo "MAIL_FROM=${{ secrets.SMTP_USER }}"
      echo "MAIL_TO=stuart@next.io"
      echo "SEC_USER_AGENT=NEXT.io Earnings Watcher (contact: stuatnext@gmail.com)"
    } > .env

      - name: Run watcher (bounded)
        run: |
          if command -v timeout >/dev/null 2>&1; then
            timeout ${RUN_TIMEOUT}s python -m app.main
          else
            python -m app.main
          fi

      - name: Save state DB
        if: always()
        uses: actions/cache/save@v4
        with:
          path: data/seen.db
          key: igwatch-seen-db-${{ runner.os }}-v2-${{ github.run_id }}

      - name: Upload logs & state (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: igwatch-logs
          path: data/seen.db
